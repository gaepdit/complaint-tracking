@page "{id:int?}"
@using Cts.AppServices.Complaints.Permissions
@using Cts.WebApp.Pages.Shared.DisplayTemplates
@using Cts.WebApp.Pages.Shared.EditorTemplates
@using GaEpd.AppLibrary.Extensions
@model DetailsModel
@{
    ViewData["Title"] = $"Complaint ID {Model.Item.Id.ToString()}";
    var alertClass = Model.Item.ComplaintClosed ? "alert-secondary" : "alert-info";
}

@* TODO: Remove when complaint actions have all been implemented: *@
@* ReSharper disable Mvc.ActionNotResolved *@

<h1>@ViewData["Title"]</h1>

@if (Model.UserCan[ComplaintOperation.ViewAsOwner])
{
    <div class="alert @alertClass" role="alert">
        This Complaint was assigned to you on @Html.DisplayFor(m => m.Item.CurrentOwnerAssignedDate, DisplayTemplate.LongDateTimeOrNotEntered).
        @if (Model.Item.CurrentOwnerAcceptedDate != null)
        {
            <br />
            @:You accepted it on @Html.DisplayFor(m => m.Item.CurrentOwnerAcceptedDate, DisplayTemplate.LongDateTimeOrNotEntered).
        }
    </div>
}

@if (Model.Item.IsDeleted) // implies `ComplaintOperation.ManageDeletions`
{
    <h2 class="text-danger-emphasis">Complaint Has Been Deleted</h2>

    <div class="d-print-none mb-2">
        <a asp-page="Restore" asp-route-id="@Model.Item.Id.ToString()" class="btn btn-outline-danger">Restore deleted complaint</a>
    </div>

    <div class="container">
        <dl class="row">
            <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.DeletedBy)</dt>
            <dd class="col-sm-8 col-lg-9">
                @Html.DisplayFor(m => m.Item.DeletedBy, DisplayTemplate.NameOrNotEntered)
                on @Html.DisplayFor(m => m.Item.DeletedAt, DisplayTemplate.LongDateTimeOrNotEntered)
            </dd>
            <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.DeleteComments)</dt>
            <dd class="col-sm-8 col-lg-9 text-break text-pre-line">@Model.Item.DeleteComments</dd>
        </dl>
    </div>
}
else
{
    <div class="d-print-none mb-3">
        @if (Model.UserCan[ComplaintOperation.Accept])
        {
            <form asp-action="Accept">
                <button id="AcceptSubmitButton" type="submit" class="btn btn-primary me-2">Accept</button>
                @Html.HiddenFor(m => m.Item.Id)
            </form>
        }
        else
        {
            @if (Model.UserCan[ComplaintOperation.EditDetails])
            {
                <a asp-page="Edit" asp-route-id="@Model.Item.Id.ToString()" class="btn btn-outline-primary me-2">Edit details</a>
            }

            @if (Model.UserCan[ComplaintOperation.EditActions])
            {
                <a asp-page="Actions" asp-route-id="@Model.Item.Id.ToString()" class="btn btn-outline-primary me-2">Add/edit actions</a>
            }
        }
        @if (Model.UserCan[ComplaintOperation.ManageDeletions])
        {
            <a asp-page="Delete" asp-route-id="@Model.Item.Id.ToString()" class="btn btn-outline-danger me-2">Delete</a>
        }
        @if (Model.Item.IsPublic)
        {
            <a asp-page="/Public/Complaints/Index" asp-route-id="@Model.Item.Id.ToString()">View public copy</a>
        }
    </div>
}

<h2 id="status">Status: <em class="text-brand">@Model.Item.Status.GetDisplayName()</em></h2>

<div class="d-print-none mb-2">
    @if (Model.UserCan[ComplaintOperation.Review])
    {
        <a asp-action="Approve" asp-route-id="@Model.Item.Id.ToString()" class="btn btn-outline-primary me-2">Close Complaint (approved)</a>
        <a asp-action="Return" asp-route-id="@Model.Item.Id.ToString()" class="btn btn-outline-primary me-2">Return to staff (not approved)</a>
    }
    @if (Model.UserCan[ComplaintOperation.Assign])
    {
        <a asp-action="Assign" asp-route-id="@Model.Item.Id.ToString()" class="btn btn-outline-primary me-2">Assign</a>
    }
    @if (Model.UserCan[ComplaintOperation.RequestReview])
    {
        <a asp-action="RequestReview" asp-route-id="@Model.Item.Id.ToString()" class="btn btn-outline-primary me-2">Submit for review</a>
    }
    @if (Model.UserCan[ComplaintOperation.Reassign])
    {
        <a asp-action="Assign" asp-route-id="@Model.Item.Id.ToString()" class="btn btn-outline-primary me-2">Transfer/reassign</a>
    }
    @if (Model.UserCan[ComplaintOperation.Reopen])
    {
        <a asp-action="Reopen" asp-route-id="@Model.Item.Id.ToString()" class="btn btn-outline-primary me-2">Reopen</a>
    }
</div>

<div class="container">
    <dl class="row">
        @if (Model.Item.ComplaintClosed)
        {
            <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.ReviewedBy)</dt>
            <dd class="col-sm-8 col-lg-9">
                @Html.DisplayFor(m => m.Item.ReviewedBy, DisplayTemplate.NameOrNotEntered)
                on @Html.DisplayFor(m => m.Item.ComplaintClosedDate, DisplayTemplate.LongDateTimeOrNotEntered)
            </dd>
            <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.ReviewComments)</dt>
            <dd class="col-sm-8 col-lg-9 text-break text-pre-line">@Model.Item.ReviewComments</dd>
        }

        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.CurrentOffice)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.CurrentOfficeName, DisplayTemplate.StringOrNotEntered)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.CurrentOwner)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.CurrentOwner, DisplayTemplate.NameOrNotEntered)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.ReceivedDate)</dt>
        <dd class="col-sm-8 col-lg-9">
            @Html.DisplayFor(m => m.Item.ReceivedDate, DisplayTemplate.LongDateTime)
        </dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.CurrentOwnerAssignedDate)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.CurrentOwnerAssignedDate, DisplayTemplate.LongDateTimeOrNotEntered)</dd>
    </dl>
</div>

<h2 class="h3">Nature of Complaint</h2>

<p class="container text-break text-pre-line">@Html.DisplayFor(m => Model.Item.ComplaintNature, DisplayTemplate.StringOrNotEntered)</p>

<div class="container">
    <dl class="row">
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.PrimaryConcernName)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.PrimaryConcernName, DisplayTemplate.StringOrNotEntered)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.SecondaryConcernName)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.SecondaryConcernName, DisplayTemplate.StringOrNotEntered)</dd>
    </dl>
</div>

<h2 class="h3">Caller</h2>

<div class="container">
    <dl class="row">
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.CallerName)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.CallerName, DisplayTemplate.StringOrNotEntered)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.CallerRepresents)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.CallerRepresents, DisplayTemplate.StringOrNotEntered)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.CallerAddress)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.CallerAddress)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.CallerPhoneNumber)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.CallerPhoneNumber)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.CallerSecondaryPhoneNumber)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.CallerSecondaryPhoneNumber)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.CallerTertiaryPhoneNumber)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.CallerTertiaryPhoneNumber)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.CallerEmail)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.CallerEmail, DisplayTemplate.StringOrNotEntered)</dd>
    </dl>
</div>

<h2 class="h3">Complaint Location</h2>

<div class="container">
    <dl class="row">
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.ComplaintLocation)</dt>
        <dd class="col-sm-8 col-lg-9 text-break text-pre-line">@Html.DisplayFor(m => m.Item.ComplaintLocation, DisplayTemplate.StringOrNotEntered)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.ComplaintDirections)</dt>
        <dd class="col-sm-8 col-lg-9 text-break text-pre-line">@Html.DisplayFor(m => m.Item.ComplaintDirections, DisplayTemplate.StringOrNotEntered)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.ComplaintCity)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.ComplaintCity, DisplayTemplate.StringOrNotEntered)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.ComplaintCounty)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.ComplaintCounty, DisplayTemplate.County)</dd>
    </dl>
</div>

<h2 class="h3">Source</h2>

<div class="container">
    <dl class="row">
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.SourceFacilityName)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.SourceFacilityName, DisplayTemplate.StringOrNotEntered)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.SourceFacilityIdNumber)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.SourceFacilityIdNumber, DisplayTemplate.StringOrNotEntered)</dd>
    </dl>
</div>

<h2 class="h3">Source Contact</h2>

<div class="container">
    <dl class="row">
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.SourceContactName)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.SourceContactName, DisplayTemplate.StringOrNotEntered)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.SourceAddress)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.SourceAddress)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.SourcePhoneNumber)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.SourcePhoneNumber)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.SourceSecondaryPhoneNumber)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.SourceSecondaryPhoneNumber)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.SourceTertiaryPhoneNumber)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.SourceTertiaryPhoneNumber)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.SourceEmail)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(m => m.Item.SourceEmail, DisplayTemplate.StringOrNotEntered)</dd>
    </dl>
</div>

<h2 class="h3">Actions</h2>

@if (Model.Item.ComplaintActions.Count == 0)
{
    <p class="container">
        <em>None.</em>
    </p>
}

@if (Model.UserCan[ComplaintOperation.EditActions])
{
    <div class="container bg-light-subtle border border-info rounded-1 my-3 py-2 d-print-none">
        <h3 id="new-action" class="h5">Add a new Action Item</h3>

        <form method="post">
            <div asp-validation-summary="All" class="alert alert-danger" role="alert"></div>
            <div class="row">
                <div class="col-md-4 mb-3">
                    @Html.EditorFor(e => e.NewAction.ActionDate, EditorTemplate.InputDateOnlyNullable)
                </div>
                <div class="col-md-8 mb-3">
                    @Html.EditorFor(e => e.NewAction.Investigator, EditorTemplate.Input)
                </div>
            </div>
            <div class="row">
                <div class="mb-3">
                    @Html.EditorFor(e => e.NewAction.ActionTypeId, EditorTemplate.Select, new { Items = Model.ActionItemTypeSelectList })
                </div>
            </div>
            <div class="row">
                <div class="mb-3">
                    @Html.EditorFor(e => e.NewAction.Comments, EditorTemplate.Textarea, new { Rows = 3 })
                </div>
            </div>

            <button type="submit" class="btn btn-primary col-6 col-sm-4 col-lg-3 mb-1 me-2">Save Action</button>
            <div class="text-danger-emphasis">* denotes a required field</div>
            <input asp-for="NewAction.ComplaintId" type="hidden" />
        </form>
    </div>
}

@if (Model.Item.ComplaintActions.Count > 0)
{
    <div class="row row-cols-1 g-3 mb-3">
        @foreach (var action in Model.Item.ComplaintActions)
        {
            <div class="col">
                <div class="card @(action.Id == Model.HighlightId ? "border-success" : "")">
                    <div class="card-header">
                        <div class="container-full">
                            <div class="row justify-content-between align-items-start g-0 my-1">
                                <div class="col">
                                    <h3 id="@action.Id.ToString()" class="h5 card-title">@action.ActionTypeName</h3>
                                    <h4 class="h5 card-subtitle text-body-secondary">@Html.DisplayFor(m => action.ActionDate, DisplayTemplate.DateOnlyOrNotEntered)</h4>
                                </div>
                                @if (Model.UserCan[ComplaintOperation.EditActions])
                                {
                                    <div class="col-auto d-print-none ms-2">
                                        <a asp-page="EditAction" asp-route-actionId="@action.Id.ToString()" class="btn btn-sm btn-outline-primary">Edit</a>
                                        <a asp-page="DeleteAction" asp-route-actionId="@action.Id.ToString()" class="btn btn-sm btn-outline-danger ms-1">Delete</a>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="card-body ">
                        <div class="text-break text-pre-line">@Html.DisplayFor(m => action.Comments, DisplayTemplate.StringOrNone)</div>
                    </div>
                    @if (action.EnteredBy is not null || action.EnteredDate is not null)
                    {
                        <small class="card-footer text-body-secondary">
                            Entered
                            @if (action.EnteredBy is not null)
                            {
                                @:by
                                @action.EnteredBy.Name
                            }
                            @if (action.EnteredDate is not null)
                            {
                                @:on
                                @Html.DisplayFor(m => action.EnteredDate.Value, DisplayTemplate.ShortDate)
                            }
                        </small>
                    }
                </div>
            </div>
        }
    </div>
}

<h2 class="h3">Attachments</h2>

@if (Model.Item.Attachments is { Count: > 0 })
{
    <table class="table table-hover align-middle" aria-label="File attachments">
        <thead>
        <tr>
            <th scope="col">File</th>
            <th scope="col">Size</th>
            <th scope="col">Uploaded By</th>
            @if (Model.UserCan[ComplaintOperation.EditAttachments])
            {
                <th scope="col">Actions</th>
            }
        </tr>
        </thead>
        <tbody>
        @foreach (var item in Model.Item.Attachments)
        {
            <tr>
                <td>
                    @if (item.IsImage)
                    {
                        <a asp-page="Attachment" asp-route-id="@item.Id.ToString()" asp-route-fileName="@item.FileName" target="_blank"
                           class="text-decoration-hover rounded d-block no-external-link" data-fancybox="attachment" data-caption="@item.FileName">
                            <img src="@item.ThumbnailSrc" class="img-thumbnail rounded me-2" alt="" />
                            @item.FileName
                        </a>
                    }
                    else
                    {
                        <a asp-page="Attachment" asp-route-id="@item.Id.ToString()" asp-route-fileName="@item.FileName" target="_blank"
                           class="text-decoration-hover rounded d-block p-2 no-external-link">
                            @Html.DisplayFor(m => item.FileExtension, DisplayTemplate.FileTypeIcon) @item.FileName
                        </a>
                    }
                </td>
                <td>@Html.DisplayFor(m => item.Size, DisplayTemplate.FileSize)</td>
                <td>
                    @Html.DisplayFor(m => item.UploadedBy, DisplayTemplate.NameOrNotEntered) <br />
                    on @Html.DisplayFor(m => item.UploadedDate, DisplayTemplate.ShortDateTime)
                </td>
                @if (Model.UserCan[ComplaintOperation.EditAttachments])
                {
                    <td>
                        <a class="btn btn-outline-danger btn-sm" asp-action="DeleteAttachment" asp-route-id="@item.Id.ToString()">Delete</a>
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p class="container">
        <em>None.</em>
    </p>
}

@if (Model.UserCan[ComplaintOperation.EditAttachments])
{
    <div class="container">
        @if (Model.Item.ComplaintClosed)
        {
            <p>
                <strong>Be careful! This complaint has already been approved/closed.</strong>
            </p>
        }

        @* TODO *@
        <p>
            <em>
                Supported file types are images, documents, and spreadsheets.<br />
                All files must comply with <a href="#" target="_blank">EPD’s complaint attachments policy (<abbr>PDF</abbr>)</a>.
            </em>
        </p>
    </div>
}


<h2 class="h3">Audit History</h2>

<div class="container">
    <dl class="row small">
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.ReceivedBy)</dt>
        <dd class="col-sm-8 col-lg-9">
            @Html.DisplayFor(m => m.Item.ReceivedBy, DisplayTemplate.NameOrNotEntered)
            on @Html.DisplayFor(m => m.Item.ReceivedDate, DisplayTemplate.LongDateTime)
        </dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(m => m.Item.EnteredBy)</dt>
        <dd class="col-sm-8 col-lg-9">
            @Html.DisplayFor(m => m.Item.EnteredBy, DisplayTemplate.NameOrNotEntered)
            on @Html.DisplayFor(m => m.Item.EnteredDate, DisplayTemplate.LongDateTime)
        </dd>
    </dl>
</div>

@if (Model.Item.ComplaintTransitions is { Count: > 0 })
{
    <details>
        <summary class="h5 text-secondary mb-2">Show full audit history</summary>
        <table class="table table-sm table-hover small align-top" aria-label="Audit history">
            <thead>
            <tr>
                <th scope="col">Action&nbsp;Date</th>
                <th scope="col">Committed&nbsp;By</th>
                <th scope="col">Action</th>
                <th scope="col">From</th>
                <th scope="col">To</th>
                <th scope="col">Comment</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in Model.Item.ComplaintTransitions)
            {
                <tr>
                    <td>@Html.DisplayFor(m => item.CommittedDate, DisplayTemplate.ShortDateTimeNoBreak)</td>
                    <td>@Html.DisplayFor(m => item.CommittedByUser, DisplayTemplate.NameOrNotEntered)</td>
                    <td>@item.TransitionType.GetDisplayName()</td>
                    <td>
                        @Html.DisplayFor(m => item.TransferredFromUser, DisplayTemplate.NameOrBlank)
                        @Html.DisplayFor(m => item.TransferredFromOffice, DisplayTemplate.NameOrBlank)
                    </td>
                    <td>
                        @Html.DisplayFor(m => item.TransferredToUser, DisplayTemplate.NameOrBlank)
                        @Html.DisplayFor(m => item.TransferredToOffice, DisplayTemplate.NameOrBlank)
                    </td>
                    <td class="text-break text-pre-line">@Html.DisplayFor(m => item.Comment)</td>
                </tr>
            }
            </tbody>
        </table>
    </details>
}

@section Scripts
{
    <partial name="_ValidationScriptsPartial" />
}
