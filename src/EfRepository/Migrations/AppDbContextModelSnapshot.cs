// <auto-generated />
using System;
using Cts.EfRepository.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cts.EfRepository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cts.Domain.DataViews.DataArchiveViews.ClosedComplaint", b =>
                {
                    b.Property<string>("CallerCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallerPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallerRepresents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallerState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallerStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallerStreet2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplaintCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ComplaintClosedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ComplaintCounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplaintDirections")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("int");

                    b.Property<string>("ComplaintLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplaintNature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentOwner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CurrentOwnerAcceptedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("CurrentOwnerAssignedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EnteredBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EnteredDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PrimaryConcern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceivedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ReceivedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReviewComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryConcern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceFacilityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceFacilityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourcePostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceStreet2")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("ClosedComplaintsView", (string)null);
                });

            modelBuilder.Entity("Cts.Domain.DataViews.DataArchiveViews.ClosedComplaintAction", b =>
                {
                    b.Property<DateOnly>("ActionDate")
                        .HasColumnType("date");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("int");

                    b.Property<string>("EnteredBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EnteredDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Investigator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("ClosedComplaintActionsView", (string)null);
                });

            modelBuilder.Entity("Cts.Domain.DataViews.DataArchiveViews.OpenComplaint", b =>
                {
                    b.Property<string>("CallerCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallerPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallerRepresents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallerState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallerStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallerStreet2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplaintCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplaintCounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplaintDirections")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("int");

                    b.Property<string>("ComplaintLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplaintNature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryConcern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceivedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ReceivedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SecondaryConcern")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("OpenComplaintsView", (string)null);
                });

            modelBuilder.Entity("Cts.Domain.DataViews.DataArchiveViews.RecordsCount", b =>
                {
                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("RecordsCountView", (string)null);
                });

            modelBuilder.Entity("Cts.Domain.Entities.ActionTypes.ActionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("Cts.Domain.Entities.Attachments.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(245)
                        .HasColumnType("nvarchar(245)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImage")
                        .HasColumnType("bit");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("UploadedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Cts.Domain.Entities.ComplaintActions.ComplaintAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ActionDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ActionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnteredById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("EnteredDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Investigator")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("DeletedById");

                    b.HasIndex(new[] { "EnteredById", "IsDeleted", "EnteredDate" }, "missing_index_1190_1189");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "EnteredById", "IsDeleted", "EnteredDate" }, "missing_index_1190_1189"), new[] { "ComplaintId" });

                    b.HasIndex(new[] { "EnteredById", "IsDeleted", "EnteredDate" }, "missing_index_1192_1191");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "EnteredById", "IsDeleted", "EnteredDate" }, "missing_index_1192_1191"), new[] { "ComplaintId", "ActionTypeId", "ActionDate", "Investigator", "Comments", "CreatedAt", "CreatedById", "UpdatedAt", "UpdatedById", "DeletedAt", "DeletedById" });

                    b.ToTable("ComplaintActions");
                });

            modelBuilder.Entity("Cts.Domain.Entities.ComplaintTransitions.ComplaintTransition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommittedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CommittedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TransferredToOfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransferredToUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransitionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommittedByUserId");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("TransferredToOfficeId");

                    b.HasIndex("TransferredToUserId");

                    b.ToTable("ComplaintTransitions");
                });

            modelBuilder.Entity("Cts.Domain.Entities.Complaints.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CallerEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CallerName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CallerRepresents")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ComplaintCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ComplaintClosed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ComplaintClosedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ComplaintCounty")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ComplaintDirections")
                        .HasMaxLength(2600)
                        .HasColumnType("nvarchar(2600)");

                    b.Property<string>("ComplaintLocation")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ComplaintNature")
                        .HasMaxLength(15000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CurrentOfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CurrentOwnerAcceptedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("CurrentOwnerAssignedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CurrentOwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeleteComments")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnteredById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("EnteredDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PrimaryConcernId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceivedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ReceivedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReviewComments")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("SecondaryConcernId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SourceEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SourceFacilityIdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SourceFacilityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EnteredById");

                    b.HasIndex("PrimaryConcernId");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("SecondaryConcernId");

                    b.HasIndex(new[] { "IsDeleted", "ComplaintCity" }, "missing_index_1131_1130");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "IsDeleted", "ComplaintCity" }, "missing_index_1131_1130"), new[] { "ComplaintNature", "ComplaintLocation", "ComplaintDirections" });

                    b.HasIndex(new[] { "ComplaintCounty", "IsDeleted" }, "missing_index_1147_1146");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "ComplaintCounty", "IsDeleted" }, "missing_index_1147_1146"), new[] { "ComplaintNature", "ComplaintLocation", "ComplaintDirections" });

                    b.HasIndex(new[] { "IsDeleted", "SourceContactName" }, "missing_index_1208_1207");

                    b.HasIndex(new[] { "ComplaintCounty", "IsDeleted", "SourceFacilityName" }, "missing_index_1260_1259");

                    b.HasIndex(new[] { "CurrentOwnerId", "CurrentOwnerAcceptedDate", "ComplaintClosed", "IsDeleted" }, "missing_index_12_11");

                    b.HasIndex(new[] { "ComplaintCounty", "IsDeleted" }, "missing_index_22_21");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "ComplaintCounty", "IsDeleted" }, "missing_index_22_21"), new[] { "ReceivedDate" });

                    b.HasIndex(new[] { "IsDeleted" }, "missing_index_24_23");

                    b.HasIndex(new[] { "CurrentOfficeId", "CurrentOwnerAcceptedDate", "ComplaintClosed", "IsDeleted" }, "missing_index_348_347");

                    b.HasIndex(new[] { "IsDeleted" }, "missing_index_486_485");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "IsDeleted" }, "missing_index_486_485"), new[] { "PrimaryConcernId", "SecondaryConcernId" });

                    b.HasIndex(new[] { "IsDeleted" }, "missing_index_50_49");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "IsDeleted" }, "missing_index_50_49"), new[] { "ReceivedDate" });

                    b.HasIndex(new[] { "IsDeleted", "SourceFacilityName" }, "missing_index_55_54");

                    b.HasIndex(new[] { "CurrentOfficeId", "IsDeleted", "CurrentOwnerId" }, "missing_index_594_593");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "CurrentOfficeId", "IsDeleted", "CurrentOwnerId" }, "missing_index_594_593"), new[] { "Status", "ReceivedDate", "ComplaintCounty", "SourceFacilityName" });

                    b.HasIndex(new[] { "CurrentOfficeId", "CurrentOwnerId", "IsDeleted" }, "missing_index_596_595");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "CurrentOfficeId", "CurrentOwnerId", "IsDeleted" }, "missing_index_596_595"), new[] { "ReceivedDate" });

                    b.HasIndex(new[] { "ReceivedById", "IsDeleted" }, "missing_index_632_631");

                    b.HasIndex(new[] { "CurrentOfficeId", "ComplaintClosed", "IsDeleted", "CurrentOwnerId" }, "missing_index_678_677");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "CurrentOfficeId", "ComplaintClosed", "IsDeleted", "CurrentOwnerId" }, "missing_index_678_677"), new[] { "Status", "ReceivedDate", "ComplaintCounty", "SourceFacilityName" });

                    b.HasIndex(new[] { "CurrentOfficeId", "ComplaintClosed", "IsDeleted", "CurrentOwnerId" }, "missing_index_690_689");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "CurrentOfficeId", "ComplaintClosed", "IsDeleted", "CurrentOwnerId" }, "missing_index_690_689"), new[] { "Status", "ReceivedDate", "ComplaintCounty", "SourceFacilityName", "ComplaintClosedDate" });

                    b.HasIndex(new[] { "CurrentOfficeId", "CurrentOwnerId", "IsDeleted" }, "missing_index_696_695");

                    b.HasIndex(new[] { "IsDeleted" }, "missing_index_727_726");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "IsDeleted" }, "missing_index_727_726"), new[] { "ReceivedDate", "PrimaryConcernId", "SecondaryConcernId" });

                    b.HasIndex(new[] { "CurrentOfficeId", "IsDeleted" }, "missing_index_734_733");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "CurrentOfficeId", "IsDeleted" }, "missing_index_734_733"), new[] { "ReceivedDate", "PrimaryConcernId", "SecondaryConcernId" });

                    b.HasIndex(new[] { "ComplaintCounty", "IsDeleted" }, "missing_index_739_738");

                    b.HasIndex(new[] { "ComplaintCounty", "IsDeleted" }, "missing_index_743_742");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "ComplaintCounty", "IsDeleted" }, "missing_index_743_742"), new[] { "PrimaryConcernId", "SecondaryConcernId" });

                    b.HasIndex(new[] { "ComplaintCounty", "ComplaintClosed", "IsDeleted", "ComplaintClosedDate" }, "missing_index_951_950");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Cts.Domain.Entities.Concerns.Concern", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Concerns");
                });

            modelBuilder.Entity("Cts.Domain.Entities.Offices.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AssignorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignorId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("Cts.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("AccountCreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("AccountUpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("MostRecentLogin")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ProfileUpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OfficeId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GaEpd.EmailService.EmailLogRepository.EmailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CopyRecipients")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("HtmlBody")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipients")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TextBody")
                        .HasMaxLength(15000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailLogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Cts.Domain.Entities.Attachments.Attachment", b =>
                {
                    b.HasOne("Cts.Domain.Entities.Complaints.Complaint", "Complaint")
                        .WithMany("Attachments")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cts.Domain.Identity.ApplicationUser", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById");

                    b.Navigation("Complaint");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("Cts.Domain.Entities.ComplaintActions.ComplaintAction", b =>
                {
                    b.HasOne("Cts.Domain.Entities.ActionTypes.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cts.Domain.Entities.Complaints.Complaint", "Complaint")
                        .WithMany("Actions")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cts.Domain.Identity.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("Cts.Domain.Identity.ApplicationUser", "EnteredBy")
                        .WithMany()
                        .HasForeignKey("EnteredById");

                    b.Navigation("ActionType");

                    b.Navigation("Complaint");

                    b.Navigation("DeletedBy");

                    b.Navigation("EnteredBy");
                });

            modelBuilder.Entity("Cts.Domain.Entities.ComplaintTransitions.ComplaintTransition", b =>
                {
                    b.HasOne("Cts.Domain.Identity.ApplicationUser", "CommittedByUser")
                        .WithMany()
                        .HasForeignKey("CommittedByUserId");

                    b.HasOne("Cts.Domain.Entities.Complaints.Complaint", "Complaint")
                        .WithMany("ComplaintTransitions")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cts.Domain.Entities.Offices.Office", "TransferredToOffice")
                        .WithMany()
                        .HasForeignKey("TransferredToOfficeId");

                    b.HasOne("Cts.Domain.Identity.ApplicationUser", "TransferredToUser")
                        .WithMany()
                        .HasForeignKey("TransferredToUserId");

                    b.Navigation("CommittedByUser");

                    b.Navigation("Complaint");

                    b.Navigation("TransferredToOffice");

                    b.Navigation("TransferredToUser");
                });

            modelBuilder.Entity("Cts.Domain.Entities.Complaints.Complaint", b =>
                {
                    b.HasOne("Cts.Domain.Entities.Offices.Office", "CurrentOffice")
                        .WithMany()
                        .HasForeignKey("CurrentOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cts.Domain.Identity.ApplicationUser", "CurrentOwner")
                        .WithMany()
                        .HasForeignKey("CurrentOwnerId");

                    b.HasOne("Cts.Domain.Identity.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("Cts.Domain.Identity.ApplicationUser", "EnteredBy")
                        .WithMany()
                        .HasForeignKey("EnteredById");

                    b.HasOne("Cts.Domain.Entities.Concerns.Concern", "PrimaryConcern")
                        .WithMany()
                        .HasForeignKey("PrimaryConcernId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cts.Domain.Identity.ApplicationUser", "ReceivedBy")
                        .WithMany()
                        .HasForeignKey("ReceivedById");

                    b.HasOne("Cts.Domain.Identity.ApplicationUser", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById");

                    b.HasOne("Cts.Domain.Entities.Concerns.Concern", "SecondaryConcern")
                        .WithMany()
                        .HasForeignKey("SecondaryConcernId");

                    b.OwnsOne("Cts.Domain.ValueObjects.IncompleteAddress", "CallerAddress", b1 =>
                        {
                            b1.Property<int>("ComplaintId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street2")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ComplaintId");

                            b1.ToTable("Complaints");

                            b1.WithOwner()
                                .HasForeignKey("ComplaintId");
                        });

                    b.OwnsOne("Cts.Domain.ValueObjects.PhoneNumber", "CallerPhoneNumber", b1 =>
                        {
                            b1.Property<int>("ComplaintId")
                                .HasColumnType("int");

                            b1.Property<string>("Number")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.Property<string>("Type")
                                .HasColumnType("nvarchar(25)");

                            b1.HasKey("ComplaintId");

                            b1.ToTable("Complaints");

                            b1.WithOwner()
                                .HasForeignKey("ComplaintId");
                        });

                    b.OwnsOne("Cts.Domain.ValueObjects.PhoneNumber", "CallerSecondaryPhoneNumber", b1 =>
                        {
                            b1.Property<int>("ComplaintId")
                                .HasColumnType("int");

                            b1.Property<string>("Number")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.Property<string>("Type")
                                .HasColumnType("nvarchar(25)");

                            b1.HasKey("ComplaintId");

                            b1.ToTable("Complaints");

                            b1.WithOwner()
                                .HasForeignKey("ComplaintId");
                        });

                    b.OwnsOne("Cts.Domain.ValueObjects.PhoneNumber", "CallerTertiaryPhoneNumber", b1 =>
                        {
                            b1.Property<int>("ComplaintId")
                                .HasColumnType("int");

                            b1.Property<string>("Number")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.Property<string>("Type")
                                .HasColumnType("nvarchar(25)");

                            b1.HasKey("ComplaintId");

                            b1.ToTable("Complaints");

                            b1.WithOwner()
                                .HasForeignKey("ComplaintId");
                        });

                    b.OwnsOne("Cts.Domain.ValueObjects.IncompleteAddress", "SourceAddress", b1 =>
                        {
                            b1.Property<int>("ComplaintId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street2")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ComplaintId");

                            b1.ToTable("Complaints");

                            b1.WithOwner()
                                .HasForeignKey("ComplaintId");
                        });

                    b.OwnsOne("Cts.Domain.ValueObjects.PhoneNumber", "SourcePhoneNumber", b1 =>
                        {
                            b1.Property<int>("ComplaintId")
                                .HasColumnType("int");

                            b1.Property<string>("Number")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.Property<string>("Type")
                                .HasColumnType("nvarchar(25)");

                            b1.HasKey("ComplaintId");

                            b1.ToTable("Complaints");

                            b1.WithOwner()
                                .HasForeignKey("ComplaintId");
                        });

                    b.OwnsOne("Cts.Domain.ValueObjects.PhoneNumber", "SourceSecondaryPhoneNumber", b1 =>
                        {
                            b1.Property<int>("ComplaintId")
                                .HasColumnType("int");

                            b1.Property<string>("Number")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.Property<string>("Type")
                                .HasColumnType("nvarchar(25)");

                            b1.HasKey("ComplaintId");

                            b1.ToTable("Complaints");

                            b1.WithOwner()
                                .HasForeignKey("ComplaintId");
                        });

                    b.OwnsOne("Cts.Domain.ValueObjects.PhoneNumber", "SourceTertiaryPhoneNumber", b1 =>
                        {
                            b1.Property<int>("ComplaintId")
                                .HasColumnType("int");

                            b1.Property<string>("Number")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.Property<string>("Type")
                                .HasColumnType("nvarchar(25)");

                            b1.HasKey("ComplaintId");

                            b1.ToTable("Complaints");

                            b1.WithOwner()
                                .HasForeignKey("ComplaintId");
                        });

                    b.Navigation("CallerAddress");

                    b.Navigation("CallerPhoneNumber");

                    b.Navigation("CallerSecondaryPhoneNumber");

                    b.Navigation("CallerTertiaryPhoneNumber");

                    b.Navigation("CurrentOffice");

                    b.Navigation("CurrentOwner");

                    b.Navigation("DeletedBy");

                    b.Navigation("EnteredBy");

                    b.Navigation("PrimaryConcern");

                    b.Navigation("ReceivedBy");

                    b.Navigation("ReviewedBy");

                    b.Navigation("SecondaryConcern");

                    b.Navigation("SourceAddress");

                    b.Navigation("SourcePhoneNumber");

                    b.Navigation("SourceSecondaryPhoneNumber");

                    b.Navigation("SourceTertiaryPhoneNumber");
                });

            modelBuilder.Entity("Cts.Domain.Entities.Offices.Office", b =>
                {
                    b.HasOne("Cts.Domain.Identity.ApplicationUser", "Assignor")
                        .WithMany()
                        .HasForeignKey("AssignorId");

                    b.Navigation("Assignor");
                });

            modelBuilder.Entity("Cts.Domain.Identity.ApplicationUser", b =>
                {
                    b.HasOne("Cts.Domain.Entities.Offices.Office", "Office")
                        .WithMany("StaffMembers")
                        .HasForeignKey("OfficeId");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cts.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cts.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cts.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cts.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cts.Domain.Entities.Complaints.Complaint", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Attachments");

                    b.Navigation("ComplaintTransitions");
                });

            modelBuilder.Entity("Cts.Domain.Entities.Offices.Office", b =>
                {
                    b.Navigation("StaffMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
